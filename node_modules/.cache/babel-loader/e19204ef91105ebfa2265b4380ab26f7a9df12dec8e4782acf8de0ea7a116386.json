{"ast":null,"code":"var _jsxFileName = \"/Users/pushpakjain/myreact1/myreactapp1/src/tsaecorescue/src/components/HomeScreen.jsx\",\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport \"./HomeScreen.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function HomeScreen() {\n  _s2();\n  var _s = $RefreshSig$();\n  const [mountains, setMountains] = useState([]);\n  const [whiteCurrents, setWhiteCurrents] = useState([]);\n  const whiteCurrentId = useRef(0);\n  const generateMountains = () => {\n    let leftPos = 0;\n    const arr = [];\n    while (leftPos < 300) {\n      const isFront = arr.length % 2 === 0;\n      const h = isFront ? Math.floor(Math.random() * 150) + 1750 : Math.floor(Math.random() * 150) + 2650;\n      const w = Math.floor(Math.random() * 200) + 1900;\n      const s = Math.random() * 3;\n      const l = leftPos + s;\n      arr.push({\n        height: h,\n        width: w,\n        left: `${l}%`,\n        isFront\n      });\n      leftPos = l + 9.5;\n    }\n    const mountainBefore = {\n      height: Math.floor(Math.random() * 150) + 1750,\n      width: Math.floor(Math.random() * 200) + 1900,\n      left: \"-5%\",\n      isFront: true\n    };\n    const mountainAfter = {\n      height: Math.floor(Math.random() * 150) + 1750,\n      width: Math.floor(Math.random() * 200) + 1900,\n      left: \"305%\",\n      isFront: false\n    };\n    arr.unshift(mountainBefore);\n    arr.push(mountainAfter);\n    return arr;\n  };\n  useEffect(() => {\n    setMountains(generateMountains());\n  }, []);\n\n  // Sun rays (unchanged)\n  const rayCount = 18;\n  const orbitRadius = 46;\n  const minRayLength = 20;\n  const maxRayLength = 25;\n  const rays = Array.from({\n    length: rayCount\n  }, (_, i) => {\n    const angle = i * (360 / rayCount);\n    const rayLength = Math.random() * (maxRayLength - minRayLength) + minRayLength;\n    const randomDelay = Math.random() * 8;\n    const randomDuration = Math.random() * 2 + 3;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sun-ray\",\n      style: {\n        width: `${rayLength}px`,\n        transform: `rotate(${angle}deg) translateX(${orbitRadius}px)`,\n        '--lineLength': `${rayLength}px`,\n        animation: `bounce ${randomDuration}s linear infinite`,\n        animationDelay: `${randomDelay}s`\n      }\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this);\n  });\n  function toggleFullscreen() {\n    if (!document.fullscreenElement) {\n      document.documentElement.requestFullscreen();\n    } else if (document.exitFullscreen) {\n      document.exitFullscreen();\n    }\n  }\n\n  // Generates a static water wave path.\n  // Baseline is set at y = 300 using 6 segments.\n  function generateWavePath(shift) {\n    const baseline = 300;\n    let d = `M0 ${baseline}`;\n    const segments = 6;\n    const segmentWidth = 1200 / segments;\n    for (let i = 0; i < segments; i++) {\n      const x0 = i * segmentWidth;\n      const x1 = x0 + segmentWidth / 3;\n      const x2 = x0 + 2 * segmentWidth / 3;\n      const x3 = (i + 1) * segmentWidth;\n      const amplitude = 20 * (i % 2 === 0 ? 1 : -1);\n      const cp1X = x1 + shift;\n      const cp2X = x2 + shift;\n      const cp1Y = baseline + amplitude;\n      const cp2Y = baseline + amplitude;\n      d += ` C ${cp1X.toFixed(1)} ${cp1Y.toFixed(1)}, ${cp2X.toFixed(1)} ${cp2Y.toFixed(1)}, ${x3} ${baseline}`;\n    }\n    d += ` L1200 800 L0 800 Z`;\n    return d;\n  }\n\n  // Static water wave (no animation on water)\n  const d1 = generateWavePath(0);\n\n  // Generates a more curvy white current line using three quadratic segments.\n  function generateWhiteLinePath(baseline) {\n    const totalLength = 200;\n    const segments = 3;\n    const segmentLength = totalLength / 2 * segments; // ~66.67px each\n    let d = `M0 ${baseline}`;\n    for (let i = 0; i < segments; i++) {\n      const startX = i * segmentLength;\n      const endX = (i + 1) * segmentLength;\n      // Control point with increased variation for more curvature.\n      const midX = (startX + endX) / 2;\n      const cpX = midX + (Math.random() * 40 - 20);\n      const cpY = baseline + (Math.random() * 40 - 20);\n      d += ` Q ${cpX.toFixed(1)} ${cpY.toFixed(1)}, ${endX} ${baseline}`;\n    }\n    return d;\n  }\n\n  // Spawn white currents only in the front/middle range.\n  // Candidate baseline is chosen between 400 and 500.\n  const spawnWhiteCurrent = _s(useCallback(_s(() => {\n    _s();\n    const id = whiteCurrentId.current++;\n    // Check if candidate baseline is too close (require at least 150px apart)\n    const isCandidateTooClose = candidate => whiteCurrents.some(current => Math.abs(current.baseline - candidate) < 150);\n    let candidate = Math.random() * (500 - 400) + 400; // candidate between 400 and 500\n    let tries = 0;\n    while (isCandidateTooClose(candidate) && tries < 10) {\n      candidate = Math.random() * (500 - 400) + 400;\n      tries++;\n    }\n    // If still too close after 10 tries, force a candidate.\n    if (tries === 10 && isCandidateTooClose(candidate)) {\n      candidate = whiteCurrents.length > 0 ? whiteCurrents[whiteCurrents.length - 1].baseline + 150 : candidate;\n      if (candidate > 500) candidate = 500;\n    }\n    // Update the generateWhiteLinePath function\n    function generateWhiteLinePath(baseline) {\n      const totalLength = 300; // Longer path\n      const segments = 5; // More segments for natural variation\n      let d = `M${Math.random() * 100 - 50} ${baseline}`; // Random starting X offset\n\n      for (let i = 0; i < segments; i++) {\n        const cp1X = i * 60 + Math.random() * 40 - 20;\n        const cp1Y = baseline + (Math.random() * 40 - 20);\n        const cp2X = i * 60 + 30 + Math.random() * 40 - 20;\n        const cp2Y = baseline + (Math.random() * 40 - 20);\n        const endX = (i + 1) * 60;\n        const endY = baseline + (Math.random() * 20 - 10);\n        d += ` C ${cp1X} ${cp1Y}, ${cp2X} ${cp2Y}, ${endX} ${endY}`;\n      }\n      return d;\n    }\n\n    // Update the spawnWhiteCurrent function\n    const spawnWhiteCurrent = useCallback(() => {\n      const id = whiteCurrentId.current++;\n\n      // Front area baselines (higher position, closer to viewer)\n      const minBaseline = 200;\n      const maxBaseline = 350;\n\n      // Check spacing with previous currents\n      const isTooClose = candidate => whiteCurrents.some(current => Math.abs(current.baseline - candidate) < 80);\n      let candidate;\n      let tries = 0;\n      do {\n        candidate = Math.random() * (maxBaseline - minBaseline) + minBaseline;\n        tries++;\n      } while (isTooClose(candidate) && tries < 20);\n\n      // Randomize animation direction\n      const direction = Math.random() > 0.5 ? 1 : -1;\n      const duration = Math.random() * 3 + 2; // Faster movement\n\n      const d = generateWhiteLinePath(candidate);\n      const newCurrent = {\n        id,\n        d,\n        duration,\n        baseline: candidate,\n        direction,\n        opacity: Math.random() * 0.5 + 0.3 // Vary opacity\n      };\n      setWhiteCurrents(prev => [...prev, newCurrent]);\n      setTimeout(() => {\n        setWhiteCurrents(prev => prev.filter(current => current.id !== id));\n      }, duration * 1000);\n    }, [whiteCurrents]);\n\n    // Update the SVG path rendering\n    {\n      whiteCurrents.map(current => /*#__PURE__*/_jsxDEV(\"path\", {\n        d: current.d,\n        stroke: \"white\",\n        strokeWidth: Math.random() * 2 + 1,\n        strokeOpacity: current.opacity,\n        fill: \"none\",\n        transform: `rotate(${Math.random() * 4 - 2})` // Slight random rotation\n        ,\n        children: /*#__PURE__*/_jsxDEV(\"animateTransform\", {\n          attributeName: \"transform\",\n          type: \"translate\",\n          from: `${current.direction === 1 ? -500 : 500} 0`,\n          to: `${current.direction === 1 ? 500 : -500} 0`,\n          dur: `${current.duration}s`,\n          additive: \"sum\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 5\n        }, this)\n      }, current.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 3\n      }, this));\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"homescreen\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mountain-container\",\n        children: mountains.map((m, i) => {\n          const style = {\n            position: \"absolute\",\n            bottom: `-${m.height / 1.2}px`,\n            left: m.left,\n            width: `${m.width}px`,\n            height: `${m.height}px`,\n            background: `radial-gradient(circle at 50% 80%, #158b34 20%, #0f6f28 85%, #0b4d1e 100%)`,\n            boxShadow: `0 20px 50px rgba(0, 0, 0, 0.4), inset 0 -20px 30px rgba(0, 0, 0, 0.5)`,\n            borderRadius: \"50% 50% 20% 20%\",\n            border: \"8px solid rgba(0, 0, 0, 0.5)\",\n            zIndex: m.isFront ? 2 : 1\n          };\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            style: style\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 18\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"brick-wall\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sun\",\n        children: rays\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"fullscreen-icon\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"hitbox\",\n          onClick: toggleFullscreen\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"corner top-left\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"corner top-right\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"corner bottom-right\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"corner bottom-left\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"water\",\n        style: {\n          position: \"absolute\",\n          bottom: 0,\n          left: 0,\n          width: \"100%\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          viewBox: \"0 0 1200 800\",\n          preserveAspectRatio: \"none\",\n          children: [/*#__PURE__*/_jsxDEV(\"path\", {\n            d: d1,\n            fill: \"#0af\",\n            fillOpacity: \"0.6\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 11\n          }, this), whiteCurrents.map(current => /*#__PURE__*/_jsxDEV(\"path\", {\n            d: current.d,\n            stroke: \"white\",\n            strokeWidth: \"1\",\n            fill: \"none\",\n            children: /*#__PURE__*/_jsxDEV(\"animateTransform\", {\n              attributeName: \"transform\",\n              type: \"translate\",\n              from: \"-200 0\",\n              to: \"1400 0\",\n              dur: `${current.duration}s`,\n              fill: \"freeze\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 258,\n              columnNumber: 15\n            }, this)\n          }, current.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 13\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 5\n    }, this);\n  }, \"BDsVcdNM/dbyyAR/uN0vWz6RvcI=\")), \"BDsVcdNM/dbyyAR/uN0vWz6RvcI=\");\n}\n_s2(HomeScreen, \"OX64hYW8dSDmCECIjvebueFlIhM=\");\n_c = HomeScreen;\nvar _c;\n$RefreshReg$(_c, \"HomeScreen\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","jsxDEV","_jsxDEV","HomeScreen","_s2","_s","$RefreshSig$","mountains","setMountains","whiteCurrents","setWhiteCurrents","whiteCurrentId","generateMountains","leftPos","arr","isFront","length","h","Math","floor","random","w","s","l","push","height","width","left","mountainBefore","mountainAfter","unshift","rayCount","orbitRadius","minRayLength","maxRayLength","rays","Array","from","_","i","angle","rayLength","randomDelay","randomDuration","className","style","transform","animation","animationDelay","fileName","_jsxFileName","lineNumber","columnNumber","toggleFullscreen","document","fullscreenElement","documentElement","requestFullscreen","exitFullscreen","generateWavePath","shift","baseline","d","segments","segmentWidth","x0","x1","x2","x3","amplitude","cp1X","cp2X","cp1Y","cp2Y","toFixed","d1","generateWhiteLinePath","totalLength","segmentLength","startX","endX","midX","cpX","cpY","spawnWhiteCurrent","id","current","isCandidateTooClose","candidate","some","abs","tries","endY","minBaseline","maxBaseline","isTooClose","direction","duration","newCurrent","opacity","prev","setTimeout","filter","map","stroke","strokeWidth","strokeOpacity","fill","children","attributeName","type","to","dur","additive","m","position","bottom","background","boxShadow","borderRadius","border","zIndex","onClick","viewBox","preserveAspectRatio","fillOpacity","_c","$RefreshReg$"],"sources":["/Users/pushpakjain/myreact1/myreactapp1/src/tsaecorescue/src/components/HomeScreen.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport \"./HomeScreen.css\";\n\nexport default function HomeScreen() {\n  const [mountains, setMountains] = useState([]);\n  const [whiteCurrents, setWhiteCurrents] = useState([]);\n  const whiteCurrentId = useRef(0);\n\n  const generateMountains = () => {\n    let leftPos = 0;\n    const arr = [];\n    while (leftPos < 300) {\n      const isFront = arr.length % 2 === 0;\n      const h = isFront \n        ? Math.floor(Math.random() * 150) + 1750 \n        : Math.floor(Math.random() * 150) + 2650;\n      const w = Math.floor(Math.random() * 200) + 1900;\n      const s = Math.random() * 3;\n      const l = leftPos + s;\n      arr.push({ height: h, width: w, left: `${l}%`, isFront });\n      leftPos = l + 9.5;\n    }\n    const mountainBefore = {\n      height: Math.floor(Math.random() * 150) + 1750,\n      width: Math.floor(Math.random() * 200) + 1900,\n      left: \"-5%\",\n      isFront: true\n    };\n    const mountainAfter = {\n      height: Math.floor(Math.random() * 150) + 1750,\n      width: Math.floor(Math.random() * 200) + 1900,\n      left: \"305%\",\n      isFront: false\n    };\n    arr.unshift(mountainBefore);\n    arr.push(mountainAfter);\n    return arr;\n  };\n\n  useEffect(() => {\n    setMountains(generateMountains());\n  }, []);\n\n  // Sun rays (unchanged)\n  const rayCount = 18;\n  const orbitRadius = 46;\n  const minRayLength = 20;\n  const maxRayLength = 25;\n  const rays = Array.from({ length: rayCount }, (_, i) => {\n    const angle = i * (360 / rayCount);\n    const rayLength = Math.random() * (maxRayLength - minRayLength) + minRayLength;\n    const randomDelay = Math.random() * 8;\n    const randomDuration = Math.random() * 2 + 3;\n    return (\n      <div\n        key={i}\n        className=\"sun-ray\"\n        style={{\n          width: `${rayLength}px`,\n          transform: `rotate(${angle}deg) translateX(${orbitRadius}px)`,\n          '--lineLength': `${rayLength}px`,\n          animation: `bounce ${randomDuration}s linear infinite`,\n          animationDelay: `${randomDelay}s`\n        }}\n      />\n    );\n  });\n\n  function toggleFullscreen() {\n    if (!document.fullscreenElement) {\n      document.documentElement.requestFullscreen();\n    } else if (document.exitFullscreen) {\n      document.exitFullscreen();\n    }\n  }\n\n  // Generates a static water wave path.\n  // Baseline is set at y = 300 using 6 segments.\n  function generateWavePath(shift) {\n    const baseline = 300;\n    let d = `M0 ${baseline}`;\n    const segments = 6;\n    const segmentWidth = 1200 / segments;\n    for (let i = 0; i < segments; i++) {\n      const x0 = i * segmentWidth;\n      const x1 = x0 + segmentWidth / 3;\n      const x2 = x0 + (2 * segmentWidth) / 3;\n      const x3 = (i + 1) * segmentWidth;\n      const amplitude = 20 * (i % 2 === 0 ? 1 : -1);\n      const cp1X = x1 + shift;\n      const cp2X = x2 + shift;\n      const cp1Y = baseline + amplitude;\n      const cp2Y = baseline + amplitude;\n      d += ` C ${cp1X.toFixed(1)} ${cp1Y.toFixed(1)}, ${cp2X.toFixed(1)} ${cp2Y.toFixed(1)}, ${x3} ${baseline}`;\n    }\n    d += ` L1200 800 L0 800 Z`;\n    return d;\n  }\n\n  // Static water wave (no animation on water)\n  const d1 = generateWavePath(0);\n\n  // Generates a more curvy white current line using three quadratic segments.\n  function generateWhiteLinePath(baseline) {\n    const totalLength = 200;\n    const segments = 3;\n    const segmentLength = totalLength / 2*segments; // ~66.67px each\n    let d = `M0 ${baseline}`;\n    for (let i = 0; i < segments; i++) {\n      const startX = i * segmentLength;\n      const endX = (i + 1) * segmentLength;\n      // Control point with increased variation for more curvature.\n      const midX = (startX + endX) / 2;\n      const cpX = midX + (Math.random() * 40 - 20);\n      const cpY = baseline + (Math.random() * 40 - 20);\n      d += ` Q ${cpX.toFixed(1)} ${cpY.toFixed(1)}, ${endX} ${baseline}`;\n    }\n    return d;\n  }\n\n  // Spawn white currents only in the front/middle range.\n  // Candidate baseline is chosen between 400 and 500.\n  const spawnWhiteCurrent = useCallback(() => {\n    const id = whiteCurrentId.current++;\n    // Check if candidate baseline is too close (require at least 150px apart)\n    const isCandidateTooClose = (candidate) =>\n      whiteCurrents.some((current) => Math.abs(current.baseline - candidate) < 150);\n    \n    let candidate = Math.random() * (500 - 400) + 400; // candidate between 400 and 500\n    let tries = 0;\n    while (isCandidateTooClose(candidate) && tries < 10) {\n      candidate = Math.random() * (500 - 400) + 400;\n      tries++;\n    }\n    // If still too close after 10 tries, force a candidate.\n    if (tries === 10 && isCandidateTooClose(candidate)) {\n      candidate = whiteCurrents.length > 0 ? whiteCurrents[whiteCurrents.length - 1].baseline + 150 : candidate;\n      if (candidate > 500) candidate = 500;\n    }\n// Update the generateWhiteLinePath function\nfunction generateWhiteLinePath(baseline) {\n  const totalLength = 300; // Longer path\n  const segments = 5; // More segments for natural variation\n  let d = `M${Math.random() * 100 - 50} ${baseline}`; // Random starting X offset\n  \n  for (let i = 0; i < segments; i++) {\n    const cp1X = (i * 60) + Math.random() * 40 - 20;\n    const cp1Y = baseline + (Math.random() * 40 - 20);\n    const cp2X = (i * 60 + 30) + Math.random() * 40 - 20;\n    const cp2Y = baseline + (Math.random() * 40 - 20);\n    const endX = (i + 1) * 60;\n    const endY = baseline + (Math.random() * 20 - 10);\n    \n    d += ` C ${cp1X} ${cp1Y}, ${cp2X} ${cp2Y}, ${endX} ${endY}`;\n  }\n  return d;\n}\n\n// Update the spawnWhiteCurrent function\nconst spawnWhiteCurrent = useCallback(() => {\n  const id = whiteCurrentId.current++;\n  \n  // Front area baselines (higher position, closer to viewer)\n  const minBaseline = 200;\n  const maxBaseline = 350;\n  \n  // Check spacing with previous currents\n  const isTooClose = (candidate) => \n    whiteCurrents.some(current => Math.abs(current.baseline - candidate) < 80);\n  \n  let candidate;\n  let tries = 0;\n  do {\n    candidate = Math.random() * (maxBaseline - minBaseline) + minBaseline;\n    tries++;\n  } while (isTooClose(candidate) && tries < 20);\n  \n  // Randomize animation direction\n  const direction = Math.random() > 0.5 ? 1 : -1;\n  const duration = Math.random() * 3 + 2; // Faster movement\n  \n  const d = generateWhiteLinePath(candidate);\n  \n  const newCurrent = {\n    id,\n    d,\n    duration,\n    baseline: candidate,\n    direction,\n    opacity: Math.random() * 0.5 + 0.3 // Vary opacity\n  };\n  \n  setWhiteCurrents((prev) => [...prev, newCurrent]);\n  \n  setTimeout(() => {\n    setWhiteCurrents((prev) => prev.filter((current) => current.id !== id));\n  }, duration * 1000);\n}, [whiteCurrents]);\n\n// Update the SVG path rendering\n{whiteCurrents.map((current) => (\n  <path \n    key={current.id} \n    d={current.d} \n    stroke=\"white\" \n    strokeWidth={Math.random() * 2 + 1} \n    strokeOpacity={current.opacity}\n    fill=\"none\"\n    transform={`rotate(${Math.random() * 4 - 2})`} // Slight random rotation\n  >\n    <animateTransform \n      attributeName=\"transform\" \n      type=\"translate\" \n      from={`${current.direction === 1 ? -500 : 500} 0`} \n      to={`${current.direction === 1 ? 500 : -500} 0`}\n      dur={`${current.duration}s`}\n      additive=\"sum\"\n    />\n  </path>\n))}\n  return (\n    <div id=\"homescreen\">\n      <div className=\"mountain-container\">\n        {mountains.map((m, i) => {\n          const style = {\n            position: \"absolute\",\n            bottom: `-${m.height / 1.2}px`,\n            left: m.left,\n            width: `${m.width}px`,\n            height: `${m.height}px`,\n            background: `radial-gradient(circle at 50% 80%, #158b34 20%, #0f6f28 85%, #0b4d1e 100%)`,\n            boxShadow: `0 20px 50px rgba(0, 0, 0, 0.4), inset 0 -20px 30px rgba(0, 0, 0, 0.5)`,\n            borderRadius: \"50% 50% 20% 20%\",\n            border: \"8px solid rgba(0, 0, 0, 0.5)\",\n            zIndex: m.isFront ? 2 : 1\n          };\n          return <div key={i} style={style} />;\n        })}\n      </div>\n      <div className=\"brick-wall\"></div>\n      <div className=\"sun\">\n        {rays}\n      </div>\n      <div className=\"fullscreen-icon\">\n        <div className=\"hitbox\" onClick={toggleFullscreen}></div>\n        <div className=\"corner top-left\"></div>\n        <div className=\"corner top-right\"></div>\n        <div className=\"corner bottom-right\"></div>\n        <div className=\"corner bottom-left\"></div>\n      </div>\n      {/* Fixed water container at the bottom */}\n      <div className=\"water\" style={{ position: \"absolute\", bottom: 0, left: 0, width: \"100%\" }}>\n        <svg viewBox=\"0 0 1200 800\" preserveAspectRatio=\"none\">\n          <path d={d1} fill=\"#0af\" fillOpacity=\"0.6\" />\n          {/* Render white current lines */}\n          {whiteCurrents.map((current) => (\n            <path key={current.id} d={current.d} stroke=\"white\" strokeWidth=\"1\" fill=\"none\">\n              <animateTransform \n                attributeName=\"transform\" \n                type=\"translate\" \n                from=\"-200 0\" \n                to=\"1400 0\" \n                dur={`${current.duration}s`} \n                fill=\"freeze\" \n              />\n            </path>\n          ))}\n        </svg>\n      </div>\n    </div>\n  );\n});\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}